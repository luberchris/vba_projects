Option Explicit 'DOCUMENT USES REPEATED CODE, HAS NOT BEEN OPTIMIZED

'Uses recursion to check for non-blank cells in Copay to determine whether HDHP or PPO
Private Function recursive_blank_check(cell As range, last_row As Long, i As Integer) As Boolean

    On Error GoTo ErrorHandler
    
    Dim Msg As String
    
    'Recursively check each cell from top to bottom for empty cells (vbNullString)
    If cell.Value = vbNullString And i < last_row Then
        i = i + 1                                                           'Iterate'
        recursive_blank_check = recursive_blank_check(cell.Offset(1, 0), last_row, i)   'Select next cell down'
    ElseIf cell.Value = vbNullString And i = last_row Then
        recursive_blank_check = True                                              'If end, then return True; evidence of HDHP file'
    Else
        recursive_blank_check = False                                             'If any values are found, return False; evidence of PPO file'
    End If
    
'https://stackoverflow.com/questions/3911973/vba-how-to-display-an-error-message-just-like-the-standard-error-message-which
'Thanks to username Dr. Belisarius, 12 Oct 2010, for the Error Handler
ErrorHandler:
    If Err.Number <> 0 Then
        Msg = "Error # " & Str(Err.Number) & " was generated by " _
        & Error.Source & Chr(13) & "Error Line: " & Erl & Chr(13) & Err.Description
        MsgBox Msg, , "Error", Err.HelpFile, Err.HelpContext
        End If
        
End Function

Private Function insertRowBelow(rowid, wks As Worksheet)

    With wks
        .Cells(rowid, "A").Offset(1).EntireRow.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
        .Cells(rowid, "A").EntireRow.Copy
        .Cells(rowid, "A").Offset(1).EntireRow.PasteSpecial xlPasteFormats
        Application.CutCopyMode = False
    End With
    
End Function


'Insert a column behind V
Private Function InsertColumn(newString As String)

    Columns("V:V").Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    range("V1").Value = newString
    
End Function

Private Function freqarray(xArray As Variant) As String

'Used to find the most frequent value in a given array - general

    Dim x
    Dim dic As Object
    Dim xMax As Integer
    Dim xOutValue As Variant
    Dim xValue As Variant
    Dim xCount As Integer
    
    Set dic = CreateObject("scripting.dictionary")
    
    On Error Resume Next
    
    xMax = 0
    xOutValue = ""
    For Each x In xArray
        If x <> "" Then
            dic(x) = dic(x) + 1
            xCount = dic(x)
            If xCount > xMax Then
                xMax = xCount
                xOutValue = x
            End If
        End If
    Next x
    freqarray = xOutValue
End Function

Private Function uniquevals(Rng As range)

'Used to find any unique values in an array, returns array as Range

    Dim tmp As String, arr() As String, cell As range, k
    
    On Error Resume Next
    
    If Not Rng Is Nothing Then
        For Each cell In Rng
            If InStr(tmp, cell.Value) = 0 And cell.Value <> "" And cell.Value <> 0 Then
                tmp = tmp & cell.Value & "|"
            End If
        Next cell
    End If
    
    arr = Split(tmp, "|")
    
    uniquevals = arr
    
End Function

Private Function apply_ted(rownum As String, benefit As String, ted As Excel.Worksheet)

'Applies exceptions from other sheets to Template Exception Details - some casts apply

    Dim q
    
    If benefit = "Fertilization  Services" Then
        benefit = "Fertilization Services"
    End If
    
    With ted
    For Each q In .UsedRange.Columns("A").Cells
        If StrComp(Trim(q), Trim(benefit), 0) = 0 And _
        Trim(q) <> Trim(.Cells(q.Row + 1, "A")) Then
            .Cells(q.Row, "B") = Cells(rownum, "Q").Value
            .Cells(q.Row, "C") = Cells(rownum, "X").Value
            .Cells(q.Row, "D") = Cells(rownum, "Y").Value
            
            If Cells(rownum, "N").Value = 1 Then
                If IsEmpty(Cells(rownum, "AK").Value) = True Then
                    .Cells(q.Row, "E") = "Not Covered"
                Else
                    .Cells(q.Row, "E") = Cells(rownum, "AK").Value
                End If
                .Cells(q.Row, "F") = Cells(rownum, "AL").Value
                .Cells(q.Row, "G") = Cells(rownum, "AM").Value
                .Cells(q.Row, "H") = Cells(rownum, "AN").Value
                .Cells(q.Row, "I") = Cells(rownum, "AO").Value
                .Cells(q.Row, "J") = Cells(rownum, "AP").Value
                .Cells(q.Row, "K") = Cells(rownum, "AQ").Value
                .Cells(q.Row, "L") = Cells(rownum, "AR").Value
                .Cells(q.Row, "M") = Cells(rownum, "AS").Value
                .Cells(q.Row, "N") = Cells(rownum, "AT").Value
                .Cells(q.Row, "O") = Cells(rownum, "AU").Value
                .Cells(q.Row, "P") = Cells(rownum, "AV").Value
            ElseIf Cells(rownum, "N").Value = 2 Then
                If IsEmpty(Cells(rownum, "AK").Value) = True Then
                    .Cells(q.Row, "Q") = "Not Covered"
                Else
                    .Cells(q.Row, "Q") = Cells(rownum, "AK").Value
                End If
                .Cells(q.Row, "R") = Cells(rownum, "AL").Value
                .Cells(q.Row, "S") = Cells(rownum, "AM").Value
                .Cells(q.Row, "T") = Cells(rownum, "AN").Value
                .Cells(q.Row, "U") = Cells(rownum, "AO").Value
                .Cells(q.Row, "V") = Cells(rownum, "AP").Value
                .Cells(q.Row, "W") = Cells(rownum, "AQ").Value
                .Cells(q.Row, "X") = Cells(rownum, "AR").Value
                .Cells(q.Row, "Y") = Cells(rownum, "AS").Value
                .Cells(q.Row, "Z") = Cells(rownum, "AT").Value
                .Cells(q.Row, "AA") = Cells(rownum, "AU").Value
                .Cells(q.Row, "AB") = Cells(rownum, "AV").Value
            End If
            
            .Cells(q.Row, "AC") = Cells(rownum, "AW").Value
            .Cells(q.Row, "AD") = Cells(rownum, "AC").Value
        Else: GoTo NextIteration
        End If
NextIteration:
    Next q
    End With
End Function

'Mapping subroutine to be called in main()'
Private Sub mapping(mode As String, LastRow As Long)

'Assigns values from Benefit Details Report to modular conversion template
'Main logic subroutine

    Dim xlfile As String, p, q, r, arr, fr, tmp, r_nums, templateLastRow, val
    Dim wkb As Excel.Workbook
    Dim std_wks As Excel.Worksheet, oon_std As Excel.Worksheet, std_lmt As Excel.Worksheet, _
        std_exc As Excel.Worksheet, tmp_exc As Excel.Worksheet
    Dim dic As Object, frequency As Object
    Dim rowdata() As String
    Dim lRow As Long
    Dim regEx As New RegExp
    Dim strInput As String
    Dim strPattern As String: strPattern = ".*Copay.*"
    
    Set dic = CreateObject("scripting.dictionary")
    Set frequency = CreateObject("scripting.dictionary")
    
    xlfile = Application.GetOpenFilename
    If xlfile = "false" Then
        MsgBox "Please open or create file: " & xlfile
        Exit Sub
        End If
    
    Set wkb = Workbooks.Open(xlfile)
    Set std_wks = wkb.Worksheets(mode & " Standard")
    Set oon_std = wkb.Worksheets("OON Standard")
    Set std_lmt = wkb.Worksheets("Standard Limit List")
    Set tmp_exc = wkb.Worksheets("Template Exception Details ")
    Set std_exc = wkb.Worksheets("Standard Exception List")
    

    With tmp_exc
        templateLastRow = .Cells(rows.Count, "A").End(xlUp).Row
        If templateLastRow < 228 Then
            insertRowBelow templateLastRow, tmp_exc
            .Cells(templateLastRow + 1, "A").EntireRow.Interior.Color = RGB(217, 217, 217)
            .Cells(templateLastRow + 1, "A").Value = "#N/A"
            .Cells(templateLastRow + 1, "A").Font.Bold = True
            .Cells(templateLastRow + 1, "A").HorizontalAlignment = xlLeft
        End If

    
    For Each p In UsedRange.Columns("V").Cells
        If p.Value = "" Or Cells(p.Row, "W").Value = "" Then

            Set val = .Columns("A").Find(What:=Cells(p.Row, "G").Value, After:=ActiveCell, LookIn:=xlFormulas, _
                    LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
                    MatchCase:=False, SearchFormat:=False)
            
            If val Is Nothing Then
                templateLastRow = .Cells(rows.Count, "A").End(xlUp).Row
                insertRowBelow templateLastRow, tmp_exc
                .Cells(templateLastRow + 1, "A").Value = Cells(p.Row, "G").Value
                .Cells(templateLastRow + 1, "A").EntireRow.Interior.Color = RGB(255, 255, 255)
                .Cells(templateLastRow + 1, "A").Font.Bold = False
                .Cells(templateLastRow + 1, "A").HorizontalAlignment = xlLeft
                .Cells(templateLastRow + 1, "B") = Cells(p.Row, "Q").Value
                .Cells(templateLastRow + 1, "C") = Cells(p.Row, "X").Value
                .Cells(templateLastRow + 1, "D") = Cells(p.Row, "Y").Value
                
                If Cells(p.Row, "N").Value = 1 Then
                    If IsEmpty(Cells(p.Row, "AK").Value) = True Then
                        .Cells(templateLastRow + 1, "E") = "Not Covered"
                    Else
                        .Cells(templateLastRow + 1, "E") = Cells(p.Row, "AK").Value
                    End If
                    .Cells(templateLastRow + 1, "F") = Cells(p.Row, "AL").Value
                    .Cells(templateLastRow + 1, "G") = Cells(p.Row, "AM").Value
                    .Cells(templateLastRow + 1, "H") = Cells(p.Row, "AN").Value
                    .Cells(templateLastRow + 1, "I") = Cells(p.Row, "AO").Value
                    .Cells(templateLastRow + 1, "J") = Cells(p.Row, "AP").Value
                    .Cells(templateLastRow + 1, "K") = Cells(p.Row, "AQ").Value
                    .Cells(templateLastRow + 1, "L") = Cells(p.Row, "AR").Value
                    .Cells(templateLastRow + 1, "M") = Cells(p.Row, "AS").Value
                    .Cells(templateLastRow + 1, "N") = Cells(p.Row, "AT").Value
                    .Cells(templateLastRow + 1, "O") = Cells(p.Row, "AU").Value
                    .Cells(templateLastRow + 1, "P") = Cells(p.Row, "AV").Value
                End If
                If Cells(p.Row + 1, "N").Value = 2 And _
                Cells(p.Row + 1, "G").Value = Cells(p.Row, "G").Value Then
                    If IsEmpty(Cells(p.Row, "AK").Value) = True Then
                        .Cells(templateLastRow + 1, "Q") = "Not Covered"
                    Else
                        .Cells(templateLastRow + 1, "Q") = Cells(p.Row + 1, "AK").Value
                    End If
                    .Cells(templateLastRow + 1, "R") = Cells(p.Row + 1, "AL").Value
                    .Cells(templateLastRow + 1, "S") = Cells(p.Row + 1, "AM").Value
                    .Cells(templateLastRow + 1, "T") = Cells(p.Row + 1, "AN").Value
                    .Cells(templateLastRow + 1, "U") = Cells(p.Row + 1, "AO").Value
                    .Cells(templateLastRow + 1, "V") = Cells(p.Row + 1, "AP").Value
                    .Cells(templateLastRow + 1, "W") = Cells(p.Row + 1, "AQ").Value
                    .Cells(templateLastRow + 1, "X") = Cells(p.Row + 1, "AR").Value
                    .Cells(templateLastRow + 1, "Y") = Cells(p.Row + 1, "AS").Value
                    .Cells(templateLastRow + 1, "Z") = Cells(p.Row + 1, "AT").Value
                    .Cells(templateLastRow + 1, "AA") = Cells(p.Row + 1, "AU").Value
                    .Cells(templateLastRow + 1, "AB") = Cells(p.Row + 1, "AV").Value
                End If
                
                .Cells(templateLastRow + 1, "AC") = Cells(p.Row + 1, "AW").Value
                .Cells(templateLastRow + 1, "AD") = Cells(p.Row + 1, "AC").Value
            Else
                .Cells(val.Row, "A").Value = Cells(p.Row, "G").Value
                .Cells(val.Row, "A").EntireRow.Interior.Color = RGB(255, 255, 255)
                .Cells(val.Row, "A").Font.Bold = False
                .Cells(val.Row, "A").HorizontalAlignment = xlLeft
                .Cells(val.Row, "B") = Cells(p.Row, "Q").Value
                .Cells(val.Row, "C") = Cells(p.Row, "X").Value
                .Cells(val.Row, "D") = Cells(p.Row, "Y").Value
                
                If Cells(p.Row, "N").Value = 1 Then
                    If IsEmpty(Cells(p.Row, "AK").Value) = True Then
                        .Cells(val.Row, "E") = "Not Covered"
                    Else
                        .Cells(val.Row, "E") = Cells(p.Row, "AK").Value
                    End If
                    .Cells(val.Row, "F") = Cells(p.Row, "AL").Value
                    .Cells(val.Row, "G") = Cells(p.Row, "AM").Value
                    .Cells(val.Row, "H") = Cells(p.Row, "AN").Value
                    .Cells(val.Row, "I") = Cells(p.Row, "AO").Value
                    .Cells(val.Row, "J") = Cells(p.Row, "AP").Value
                    .Cells(val.Row, "K") = Cells(p.Row, "AQ").Value
                    .Cells(val.Row, "L") = Cells(p.Row, "AR").Value
                    .Cells(val.Row, "M") = Cells(p.Row, "AS").Value
                    .Cells(val.Row, "N") = Cells(p.Row, "AT").Value
                    .Cells(val.Row, "O") = Cells(p.Row, "AU").Value
                    .Cells(val.Row, "P") = Cells(p.Row, "AV").Value
                End If
                If Cells(p.Row + 1, "N").Value = 2 And _
                Cells(p.Row + 1, "G").Value = Cells(p.Row, "G").Value Then
                    If IsEmpty(Cells(p.Row, "AK").Value) = True Then
                        .Cells(val.Row, "Q") = "Not Covered"
                    Else
                        .Cells(val.Row, "Q") = Cells(p.Row + 1, "AK").Value
                    End If
                    .Cells(val.Row, "R") = Cells(p.Row + 1, "AL").Value
                    .Cells(val.Row, "S") = Cells(p.Row + 1, "AM").Value
                    .Cells(val.Row, "T") = Cells(p.Row + 1, "AN").Value
                    .Cells(val.Row, "U") = Cells(p.Row + 1, "AO").Value
                    .Cells(val.Row, "V") = Cells(p.Row + 1, "AP").Value
                    .Cells(val.Row, "W") = Cells(p.Row + 1, "AQ").Value
                    .Cells(val.Row, "X") = Cells(p.Row + 1, "AR").Value
                    .Cells(val.Row, "Y") = Cells(p.Row + 1, "AS").Value
                    .Cells(val.Row, "Z") = Cells(p.Row + 1, "AT").Value
                    .Cells(val.Row, "AA") = Cells(p.Row + 1, "AU").Value
                    .Cells(val.Row, "AB") = Cells(p.Row + 1, "AV").Value
                End If
                
                .Cells(val.Row, "AC") = Cells(p.Row + 1, "AW").Value
                .Cells(val.Row, "AD") = Cells(p.Row + 1, "AC").Value
                GoTo NextIteration
            End If
        End If
NextIteration:
    Next p
    End With
    
    '- - - - - - - - INN MODULAR - - - - - - - -
    
    arr = uniquevals(range("V2", "V" & LastRow))
    
    For Each p In arr
        If p <> "" Then
            On Error Resume Next
            For Each q In range("V3", "V" & LastRow)
                If Cells(q.Row, "S") = "Yes" Then
                    If StrComp(q, p, 0) = 0 And q <> "0" Then
                        tmp = tmp & q.Row & "|"
                    End If
                End If
            Next q
            dic(p) = tmp
            tmp = ""
        End If
    Next p
    
    tmp = ""
    r_nums = ""
    
    
    For Each p In dic.keys                              'Dictionary of strings
        rowdata = Split(dic(p), "|")                    'Split strings in dictionary into arrays
        
        '- - - - - - - - COL B - - - - - - - -
        
        For Each q In rowdata                           'Iterate over array
            If Cells(q, "AK").Value <> "" And _
                StrComp(Cells(q, "N").Value, "1", 0) = 0 Then            'Ensure INN & Check Column AK for blanks // remove
                tmp = tmp & Cells(q, "AK").Value & "|"  'Generate temporary string to be split
            End If
        Next q
        
        fr = freqarray(Split(tmp, "|"))                 'Split tmp and find most frequent value
        tmp = ""
        
        For Each q In std_wks.UsedRange.Columns("A").Cells 'Search template categories for p
            If q = p Then
                std_wks.Cells(q.Row, "B").Value = fr     'Assign most frequent value to column B
            End If
        Next q
        
        '- - - - - - - - COL C - - - - - - - - -
        
        r_nums = ""
        tmp = ""
        
        For Each q In rowdata           'Row IDs
            If StrComp(Cells(q, "AK").Value, fr, 0) = 0 Then
                If Cells(q, "N").Value = 1 Then
                    r_nums = r_nums & q & "|"
                End If
            Else
                apply_ted Trim(q), Cells(q, "G"), tmp_exc
            End If
        Next q
        
        For Each q In Split(r_nums, "|")
            tmp = tmp & Cells(q, "AL").Value & "|"
        Next q
        
        fr = freqarray(Split(tmp, "|"))
        
        For Each q In std_wks.UsedRange.Columns("A").Cells
            If q = p Then
                std_wks.Cells(q.Row, "C").Value = fr
            End If
        Next q
        
        '- - - - - - - - COL D - - - - - - - - -
        
        r_nums = ""
        tmp = ""
        
        For Each q In rowdata           'Row IDs
            If StrComp(Cells(q, "AL").Value, fr, 0) = 0 Then
                If Cells(q, "N").Value = 1 Then
                    r_nums = r_nums & q & "|"
                End If
            Else
                apply_ted Trim(q), Cells(q, "G"), tmp_exc
            End If
        Next q
        
        For Each q In Split(r_nums, "|")
            tmp = tmp & Cells(q, "AM").Value & "|"
        Next q
        
        fr = freqarray(Split(tmp, "|"))
        
        For Each q In std_wks.UsedRange.Columns("A").Cells
            If q = p Then
                std_wks.Cells(q.Row, "D").Value = fr
            End If
        Next q
        
        '- - - - - - - - COL E - - - - - - - - -
        
        r_nums = ""
        tmp = ""
        
        For Each q In rowdata           'Row IDs
            If StrComp(Cells(q, "AM").Value, fr, 0) = 0 Then
                If Cells(q, "N").Value = 1 Then
                    r_nums = r_nums & q & "|"
                End If
            Else
                apply_ted Trim(q), Cells(q, "G"), tmp_exc
            End If
        Next q
        
        For Each q In Split(r_nums, "|")
            tmp = tmp & Cells(q, "AN").Value & "|"
        Next q
        
        fr = freqarray(Split(tmp, "|")) * 100
        
        For Each q In std_wks.UsedRange.Columns("A").Cells
            If q = p Then
                std_wks.Cells(q.Row, "E").Value = fr
            End If
        Next q
        
        '- - - - - - - - COL F - - - - - - - - -
        
        r_nums = ""
        tmp = ""
        
        For Each q In rowdata           'Row IDs
            If StrComp(Cells(q, "AN").Value, fr, 0) = 0 Then
                If Cells(q, "N").Value = 1 Then
                    r_nums = r_nums & q & "|"
                End If
            Else
                apply_ted Trim(q), Cells(q, "G"), tmp_exc
            End If
        Next q
        
        For Each q In Split(r_nums, "|")
            tmp = tmp & Cells(q, "AO").Value & "|"
        Next q
        
        fr = freqarray(Split(tmp, "|"))
        
        For Each q In std_wks.UsedRange.Columns("A").Cells
            If q = p Then
                std_wks.Cells(q.Row, "F").Value = fr
            End If
        Next q
        
        '- - - - - - - - COL G - - - - - - - - -
        
        r_nums = ""
        tmp = ""
        
        For Each q In rowdata           'Row IDs
            If StrComp(Cells(q, "AO").Value, fr, 0) = 0 Then
                If Cells(q, "N").Value = 1 Then
                    r_nums = r_nums & q & "|"
                End If
            Else
                apply_ted Trim(q), Cells(q, "G"), tmp_exc
            End If
        Next q
        
        For Each q In Split(r_nums, "|")
            tmp = tmp & Cells(q, "AP").Value & "|"
        Next q
        
        fr = freqarray(Split(tmp, "|"))
        
        For Each q In std_wks.UsedRange.Columns("A").Cells
            If q = p Then
                std_wks.Cells(q.Row, "G").Value = fr
            End If
        Next q
                
        tmp = ""
        fr = ""
        r_nums = ""
        
    Next p
    
    With regEx
        .Global = True
        .MultiLine = True
        .IgnoreCase = False
        .Pattern = strPattern
    End With
    
    With std_wks
    For Each q In .UsedRange.Columns("B").Cells
        If Not regEx.test(q) And q.Row <> 1 Then
            .Cells(q.Row, "G").Value = ""
        End If
    Next q
    End With
    
    '- - - - - - - - - - - - OON MODULAR - - - - - - - - - - - -
    
    arr = uniquevals(range("W2", "W" & LastRow))
    
    For Each p In arr
        If p <> "" Then
            On Error Resume Next
            For Each q In range("W3", "W" & LastRow)
                If Cells(q.Row, "S") = "Yes" Then
                    If StrComp(q, p, 0) = 0 And q <> "" And q <> "0" Then
                        tmp = tmp & q.Row & "|"
                    End If
                End If
            Next q
            dic(p) = tmp
            tmp = ""
        End If
    Next p
    
    For Each p In dic.keys                              'Dictionary of strings
        rowdata = Split(dic(p), "|")                    'Split strings in dictionary into arrays
        
        '- - - - - - - - COL B - - - - - - - -
        
        For Each q In rowdata                           'Iterate over array
            If Cells(q, "AK").Value <> "" And _
                StrComp(Cells(q, "N").Value, "2", 0) = 0 Then  'Ensure OON & Check Column AK for blanks // remove
                tmp = tmp & Cells(q, "AK").Value & "|"  'Generate temporary string to be split
            End If
        Next q
        
        fr = freqarray(Split(tmp, "|"))                 'Split tmp and find most frequent value
        tmp = ""
        
        For Each q In oon_std.UsedRange.Columns("A").Cells 'Search template categories for p
            If q = p Then
                oon_std.Cells(q.Row, "B").Value = fr    'Assign most frequent value to column B
                Debug.Print q & " " & fr
            End If
        Next q
        
        '- - - - - - - - COL C - - - - - - - - -
        
        r_nums = ""
        tmp = ""
        
        For Each q In rowdata           'Row IDs
            If StrComp(Cells(q, "AK").Value, fr, 0) = 0 Then
                If Cells(q, "N").Value = 2 Then
                    r_nums = r_nums & q & "|"
                End If
            Else
                apply_ted Trim(q), Cells(q, "G"), tmp_exc
            End If
        Next q
        
        For Each q In Split(r_nums, "|")
            tmp = tmp & Cells(q, "AL").Value & "|"
        Next q
        
        fr = freqarray(Split(tmp, "|"))
        
        For Each q In oon_std.UsedRange.Columns("A").Cells
            If q = p Then
                oon_std.Cells(q.Row, "C").Value = fr
            End If
        Next q
        
        '- - - - - - - - COL D - - - - - - - - -
        
        r_nums = ""
        tmp = ""
        
        For Each q In rowdata           'Row IDs
            If StrComp(Cells(q, "AL").Value, fr, 0) = 0 Then
                If Cells(q, "N").Value = 2 Then
                    r_nums = r_nums & q & "|"
                End If
            Else
                apply_ted Trim(q), Cells(q, "G"), tmp_exc
            End If
        Next q
        
        For Each q In Split(r_nums, "|")
            tmp = tmp & Cells(q, "AM").Value & "|"
        Next q
        
        fr = freqarray(Split(tmp, "|"))
        
        For Each q In oon_std.UsedRange.Columns("A").Cells
            If q = p Then
                oon_std.Cells(q.Row, "D").Value = fr
            End If
        Next q
        
        '- - - - - - - - COL E - - - - - - - - -
        
        r_nums = ""
        tmp = ""
        
        For Each q In rowdata           'Row IDs
            If StrComp(Cells(q, "AM").Value, fr, 0) = 0 Then
                If Cells(q, "N").Value = 2 Then
                    r_nums = r_nums & q & "|"
                End If
            Else
                apply_ted Trim(q), Cells(q, "G"), tmp_exc
            End If
        Next q
        
        For Each q In Split(r_nums, "|")
            tmp = tmp & Cells(q, "AN").Value & "|"
        Next q
        
        fr = freqarray(Split(tmp, "|")) * 100
        
        For Each q In oon_std.UsedRange.Columns("A").Cells
            If q = p Then
                oon_std.Cells(q.Row, "E").Value = fr
            End If
        Next q
        
        '- - - - - - - - COL F - - - - - - - - -
        
        r_nums = ""
        tmp = ""
        
        For Each q In rowdata           'Row IDs
            If StrComp(Cells(q, "AN").Value, fr, 0) = 0 Then
                If Cells(q, "N").Value = 2 Then
                    r_nums = r_nums & q & "|"
                End If
            Else
                apply_ted Trim(q), Cells(q, "G"), tmp_exc
            End If
        Next q
        
        For Each q In Split(r_nums, "|")
            tmp = tmp & Cells(q, "AO").Value & "|"
        Next q
        
        fr = freqarray(Split(tmp, "|"))
        
        For Each q In oon_std.UsedRange.Columns("A").Cells
            If q = p Then
                oon_std.Cells(q.Row, "F").Value = fr
            End If
        Next q
        
        '- - - - - - - - COL G - - - - - - - - -
        
        r_nums = ""
        tmp = ""
        
        For Each q In rowdata           'Row IDs
            If StrComp(Cells(q, "AO").Value, fr, 0) = 0 Then
                If Cells(q, "N").Value = 2 Then
                    r_nums = r_nums & q & "|"
                End If
            ElseIf Cells(q, "").Value <> fr Then
                apply_ted Trim(q), Cells(q, "G"), tmp_exc
            End If
        Next q
        
        For Each q In Split(r_nums, "|")
            tmp = tmp & Cells(q, "AP").Value & "|"
        Next q
        
        fr = freqarray(Split(tmp, "|"))
        
        For Each q In oon_std.UsedRange.Columns("A").Cells
            If q = p Then
                oon_std.Cells(q.Row, "G").Value = fr
            End If
        Next q
        
        tmp = ""
        fr = ""
        r_nums = ""
        
    Next p
    
    With oon_std
    For Each q In .UsedRange.Columns("B").Cells
        If Not regEx.test(q) And q.Row <> 1 Then
            .Cells(q.Row, "G").Value = ""
        End If
    Next q
    End With
    
    '- - - - - - - - Standard Limit List - - - - - - - -
    
    With std_lmt
    For Each p In range("G2", "G" & LastRow)
        If p = "Obesity Surgery - Bariatric/Gastric Surgery " Then
            For Each q In .UsedRange.Columns("A").Cells
                If q = "Obesity Surgery (Bariatric/Gastric Surgery)" And Cells(p.Row, "AQ").Value <> "" Then
                    .Cells(q.Row, "B").Value = "Yes"
                    .Cells(q.Row, "C").Value = Cells(p.Row, "X").Value
                    .Cells(q.Row, "D").Value = Cells(p.Row, "Y").Value
                    .Cells(q.Row, "E").Value = Cells(p.Row, "AQ").Value
                    .Cells(q.Row, "F").Value = Cells(p.Row, "AR").Value
                    .Cells(q.Row, "G").Value = Cells(p.Row, "AT").Value
                    .Cells(q.Row, "H").Value = Cells(p.Row, "AS").Value
                    .Cells(q.Row, "I").Value = Cells(p.Row, "AU").Value
                    .Cells(q.Row, "J").Value = Cells(p.Row, "AV").Value
                    .Cells(q.Row, "K").Value = Cells(p.Row, "AW").Value
                    If Cells(p.Row, "N").Value = 1 And Cells(p.Row, "N").Value = 2 Then
                        .Cells(q.Row, "L").Value = "Tier 1, Tier 2"
                    ElseIf Cells(p.Row, "N").Value = 1 And Cells(p.Row, "N").Value <> 2 Then
                        .Cells(q.Row, "L").Value = "Tier 1"
                    ElseIf Cells(p.Row, "N").Value <> 1 And Cells(p.Row, "N").Value = 2 Then
                        .Cells(q.Row, "L").Value = "Tier 2"
                    End If
                End If
            Next q
        ElseIf p <> "Obesity Surgery - Bariatric/Gastric Surgery " Then
            For Each q In .UsedRange.Columns("A").Cells
                If Trim(q) = Trim(p) And Cells(p.Row, "AQ").Value <> "" Then
                    .Cells(q.Row, "B").Value = "Yes"
                    .Cells(q.Row, "C").Value = Cells(p.Row, "X").Value
                    .Cells(q.Row, "D").Value = Cells(p.Row, "Y").Value
                    .Cells(q.Row, "E").Value = Cells(p.Row, "AQ").Value
                    .Cells(q.Row, "F").Value = Cells(p.Row, "AR").Value
                    .Cells(q.Row, "G").Value = Cells(p.Row, "AT").Value
                    .Cells(q.Row, "H").Value = Cells(p.Row, "AS").Value
                    .Cells(q.Row, "I").Value = Cells(p.Row, "AU").Value
                    .Cells(q.Row, "J").Value = Cells(p.Row, "AV").Value
                    .Cells(q.Row, "K").Value = Cells(p.Row, "AW").Value
                    If Cells(p.Row, "N").Value = 1 And Cells(p.Row, "N").Value = 2 Then
                        .Cells(q.Row, "L").Value = "Tier 1, Tier 2"
                    ElseIf Cells(p.Row, "N").Value = 1 And Cells(p.Row, "N").Value <> 2 Then
                        .Cells(q.Row, "L").Value = "Tier 1"
                    ElseIf Cells(p.Row, "N").Value <> 1 And Cells(p.Row, "N").Value = 2 Then
                        .Cells(q.Row, "L").Value = "Tier 2"
                    End If
                End If
            Next q
        p = ""
        End If
    Next p
    End With
    
    '- - - - - - - - Standard Exception List - - - - - - - -
    
    With std_exc
    For Each p In range("G2", "G" & LastRow)
        For Each q In .UsedRange.Columns("A").Cells
            If Trim(q) = Trim(p) And Cells(p.Row, "N").Value = 1 And Cells(p.Row + 1, "N") = 2 Then
                If Cells(p.Row, "S").Value <> Cells(p.Row + 1, "S").Value Then
                    .Cells(q.Row, "B").Value = ""
                ElseIf Cells(p.Row, "S").Value = Cells(p.Row + 1, "S").Value And Cells(p.Row, "S").Value = "Yes" Then
                    .Cells(q.Row, "B").Value = "Covered"
                ElseIf Cells(p.Row, "S").Value = Cells(p.Row + 1, "S").Value And Cells(p.Row, "S").Value = "No" Then
                    .Cells(q.Row, "B").Value = "Not Covered"
                    
            ' Tried Else, assigns Not Covered over Covered  opt for Elif workaround
            
                End If
            End If
        Next q
    Next p
    End With
    
    '- - - - - - - - Template Exception Details - - - - - - -
    'Most of these fields have been covered during previous iterations
    'of the Benefit Details Report
    
    With tmp_exc
    For Each p In .UsedRange.Columns("A").Cells
        If Not IsEmpty(.Cells(p.Row, "E")) Then
            If IsEmpty(.Cells(p.Row, "Q")) Then
                .Cells(p.Row, "Q").Value = "Not Covered"
            End If
        ElseIf Not IsEmpty(.Cells(p.Row, "Q")) Then
            .Cells(p.Row, "E").Value = "Not Covered"
        End If
    Next p
    End With
    
End Sub

Sub main()
    
    'Set dimensions'
    Dim seconds As Double
    Dim LastRow As Long
    Dim vra As range, wra As range, apra As range
    Dim oon_func As String
    Dim StartTime As Double
    Dim SecondsElapsed As Double
    Dim mode As String
    Dim newMap As Object
    
    StartTime = Timer
    
    If Not range("V1").Value = "INN Modular Category" Then
        InsertColumn ("OON Modular Category")
        InsertColumn ("INN Modular Category")
        End If
    
    'Determine how long the table is'
    LastRow = Cells(rows.Count, "G").End(xlUp).Row
    
    'Set variables'
    Set vra = range("V2", "V" & LastRow)
    Set wra = range("W2", "W" & LastRow)
    Set apra = range("AP2", "AP" & LastRow)
    
    'Initiate recursive check for Copays'
    If recursive_blank_check(range("AP2"), LastRow, 0) = True Then
        vra.Formula = "=IFERROR(VLOOKUP(G2,'[Template Mapping_Modular Conversion.xlsx]Base HDHP Standard 1 Mapping'!$A$3:$B$235,2,FALSE), """")"
        mode = "HDHP"
    Else
        vra.Formula = "=IFERROR(VLOOKUP(G2,'[Template Mapping_Modular Conversion.xlsx]Base PPO Standard 1 Mapping'!$A$3:$B$235,2,FALSE), """")"
        mode = "PPO"
    End If
    
    Debug.Print mode
    
    'All OON cells are Base OON Standard'
    wra.Formula = "=IFERROR(VLOOKUP(G2,'[Template Mapping_Modular Conversion.xlsx]Base OON Standard 1 Mapping'!$A$3:$B$235,2,FALSE), """")"
    
    mapping mode, LastRow
    
    SecondsElapsed = Round(Timer - StartTime, 4)
    Debug.Print "Time to complete: " & SecondsElapsed & " seconds"
    
End Sub
